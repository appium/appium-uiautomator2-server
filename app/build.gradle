buildscript {
    dependencies {
        classpath libs.unmockplugin
    }
}
plugins{
    alias(libs.plugins.android.application)
}
// Apply UnMock plugin via legacy syntax (not published to Plugin Portal)
apply plugin: 'de.mobilej.unmock'

android {
    compileSdk 34
    defaultConfig {
        applicationId 'io.appium.uiautomator2'
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 210
        archivesBaseName = 'appium-uiautomator2'
        /**
         * versionName should be updated and inline with version in package.json for every npm release.
         */
        versionName '7.3.1'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        debug {
            debuggable true
        }
        customDebuggableBuildType {
            debuggable true
        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = outputFileName.replace('debug.apk', "v${defaultConfig.versionName}.apk")
            }
        }
    }
    flavorDimensions 'default'
    productFlavors {
        e2eTest {
            applicationId 'io.appium.uiautomator2.e2etest'
        }
        server {
            applicationId 'io.appium.uiautomator2.server'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                it.jvmArgs([
                        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.time=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.time.format=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
                        '--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.net=ALL-UNNAMED',
                        '--add-opens', 'java.base/sun.net.www.protocol.http=ALL-UNNAMED',
                        '--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED',
                ])
            }
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/maven/com.google.guava/guava/pom.properties', 'META-INF/maven/com.google.guava/guava/pom.xml']
        }
    }
    lint {
        abortOnError false
    }
    namespace 'io.appium.uiautomator2.test'
}

unMock {
    keepStartingWith 'com.android.internal.util.'
    keepStartingWith 'android.util.'
    keepStartingWith 'android.view.'
    keepStartingWith 'android.internal.'
}

dependencies {
    // https://download.eclipse.org/oomph/archive/reports/download.eclipse.org/releases/2021-09/index/org.eclipse.wst.xml.xpath2.processor_2.1.101.v201903222120.html
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation libs.bundles.androix.test
    implementation libs.uiautomator
    implementation libs.gson
    implementation libs.netty.all
    implementation libs.junidecode
    // The next three dependencies are required for XPath search to work
    implementation libs.xercesimpl
    implementation libs.java.cup.runtime
    //noinspection GradleDependency
    implementation libs.icu4j
    testImplementation libs.junit
    testImplementation libs.json
    testImplementation libs.bundles.powermock
    testImplementation libs.robolectric
    testImplementation libs.javassist
    androidTestImplementation libs.junit
    androidTestImplementation libs.okhttp
}

task installAUT(type: Exec) {
    group = 'test'
    description = 'Install app under test'
    doFirst {
        println('Install AUT')
        def adb = "$System.env.ANDROID_HOME/platform-tools/adb"
        def apk = file('../node_modules/android-apidemos/apks/ApiDemos-debug.apk')
        def sdkVersion = "$adb shell getprop ro.build.version.sdk".execute().text.trim()
        println "Device SDK version: $sdkVersion"
        /* This seems weird but it is what it is: https://github.com/wix/detox/issues/274 */
        def command = sdkVersion.toInteger() < 23 ? "$adb install -r $apk" : "$adb install -r -g $apk"
        println "Execute command: $command"
        commandLine command.split(' ')
    }
}

afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith('connectedE2eTestDebugAndroidTest')) {
            task.dependsOn installAUT
        }
    }
}
